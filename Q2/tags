!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
CFLAGS	Makefile	/^CFLAGS = -g -Wall -Wextra -pthread$/;"	m
Container	main.h	/^typedef struct Container {$/;"	s
Container	main.h	/^} Container;$/;"	t	typeref:struct:Container
K	main.h	/^    K; \/\/ number of students$/;"	v	typeref:typename:int
M	main.h	/^int M, \/\/ number of robots$/;"	v	typeref:typename:int
MAX_ARRIVAL_TIME	student.c	/^const int MAX_ARRIVAL_TIME = 10;$/;"	v	typeref:typename:const int
N	main.h	/^    N, \/\/ number of tables$/;"	v	typeref:typename:int
Robot	main.h	/^typedef struct Robot {$/;"	s
Robot	main.h	/^} Robot;$/;"	t	typeref:struct:Robot
Student	main.h	/^typedef struct Student {$/;"	s
Student	main.h	/^} Student;$/;"	t	typeref:struct:Student
Table	main.h	/^typedef struct Table {$/;"	s
Table	main.h	/^} Table;$/;"	t	typeref:struct:Table
Vessels	main.h	/^typedef struct Vessels {$/;"	s
Vessels	main.h	/^} Vessels;$/;"	t	typeref:struct:Vessels
__MAIN_H	main.h	/^#define __MAIN_H$/;"	d
__ROBOT_H	robot.h	/^#define __ROBOT_H$/;"	d
__STUDENT_H	student.h	/^#define __STUDENT_H$/;"	d
__TABLE_H	table.h	/^#define __TABLE_H$/;"	d
all	Makefile	/^all: main.o robot.o table.o student.o$/;"	t
arrivalTime	main.h	/^        arrivalTime;$/;"	m	struct:Student	typeref:typename:int
biryani_ready	robot.c	/^void biryani_ready(Robot * r) {$/;"	f	typeref:typename:void
capacity	main.h	/^        capacity;$/;"	m	struct:Vessels	typeref:typename:int
capacity	main.h	/^    int capacity;$/;"	m	struct:Container	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
container	main.h	/^    struct Container * container;$/;"	m	struct:Table	typeref:struct:Container *
count	main.h	/^    int count,$/;"	m	struct:Vessels	typeref:typename:int
eating	main.h	/^    int eating[10];$/;"	m	struct:Table	typeref:typename:int[10]
init	main.c	/^void init() {$/;"	f	typeref:typename:void
initRobot	robot.c	/^void initRobot(int i) {$/;"	f	typeref:typename:void
initStudent	student.c	/^void initStudent(int i) {$/;"	f	typeref:typename:void
initTable	table.c	/^void initTable(int i) {$/;"	f	typeref:typename:void
main	main.c	/^int main() {$/;"	f	typeref:typename:int
main.o	Makefile	/^main.o: main.h main.c robot.h table.h student.h$/;"	t
min	table.c	/^int min(int a, int b) {$/;"	f	typeref:typename:int
mutex	main.h	/^    pthread_mutex_t mutex;$/;"	m	struct:Robot	typeref:typename:pthread_mutex_t
mutex	main.h	/^    pthread_mutex_t mutex;$/;"	m	struct:Table	typeref:typename:pthread_mutex_t
randRange	main.c	/^int randRange(int l, int r) {$/;"	f	typeref:typename:int
ready_to_serve_table	table.c	/^void ready_to_serve_table(Table * t, int slots) {$/;"	f	typeref:typename:void
robot	main.h	/^    struct Robot * robot;$/;"	m	struct:Table	typeref:struct:Robot *
robot.o	Makefile	/^robot.o: robot.h main.h robot.c$/;"	t
robotRunner	robot.c	/^void * robotRunner(void * a) {$/;"	f	typeref:typename:void *
robot_t	main.h	/^          * robot_t;$/;"	v	typeref:typename:pthread_t ***
robots	main.h	/^Robot ** robots;$/;"	v	typeref:typename:Robot **
slots	main.h	/^        slots;$/;"	m	struct:Table	typeref:typename:int
student.o	Makefile	/^student.o: student.h main.h student.c$/;"	t
studentRunner	student.c	/^void * studentRunner(void * a) {$/;"	f	typeref:typename:void *
student_t	main.h	/^          * student_t,$/;"	v	typeref:typename:pthread_t **
students	main.h	/^Student ** students;$/;"	v	typeref:typename:Student **
table	main.h	/^    struct Table * table;$/;"	m	struct:Robot	typeref:struct:Table *
table.o	Makefile	/^table.o: table.h main.h table.c$/;"	t
tableRunner	table.c	/^void * tableRunner(void * a) {$/;"	f	typeref:typename:void *
table_t	main.h	/^pthread_t * table_t,$/;"	v	typeref:typename:pthread_t *
tables	main.h	/^Table ** tables;$/;"	v	typeref:typename:Table **
uid	main.h	/^    int uid,$/;"	m	struct:Student	typeref:typename:int
uid	main.h	/^    int uid,$/;"	m	struct:Table	typeref:typename:int
uid	main.h	/^    int uid;$/;"	m	struct:Robot	typeref:typename:int
vessels	main.h	/^    struct Vessels * vessels;$/;"	m	struct:Robot	typeref:struct:Vessels *
wait_for_slot	student.c	/^Table * wait_for_slot(Student * s) {$/;"	f	typeref:typename:Table *
